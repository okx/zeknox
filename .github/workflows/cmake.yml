# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Cuda Build

on:
  push:
    # branches: [ "master", "dev" ]
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: native
          
    steps:
      - uses: Jimver/cuda-toolkit@v0.2.18
        id: cuda-toolkit
        with:
          cuda: '12.3.0'
          method: 'network'
          sub-packages: '["nvcc", "cudart", "toolkit"]'
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Configure default goldilocks
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      - name: Build default and install
        run: sudo cmake --build build --config ${{env.BUILD_TYPE}} --target install
        
      - name: Configure bn254 & MSM
        run: cmake -B build-bn254 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MSM=ON -DCURVE=BN254
      - name: Build bn254 & MSM
        run: cmake --build build-bn254 --config ${{env.BUILD_TYPE}}

      - name: Install gmp
        working-directory: wrappers/cpp
        run: ./build_gmp.sh host
      - name: Install gtest
        run: sudo apt install libgtest-dev nasm
      - name: Configure cpp wrapper
        working-directory: wrappers/cpp
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCURVE=BN254
      - name: Build cpp wrapper
        working-directory: wrappers/cpp
        run: cmake --build build --config ${{env.BUILD_TYPE}}
      
